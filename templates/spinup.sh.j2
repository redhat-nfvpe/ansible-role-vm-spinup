#!/bin/bash

# Take one argument from the commandline: VM name
if [ $# -gt 8 ] || [ $# -lt 2 ]; then
    echo "Usage: $0 <node-name> {memory-MB} {vCPUs} {IP-address}"
    exit 1
fi

while getopts n:m:c:s:p: OPT
do
	case $OPT in
		n)
		nodename=$OPTARG
		;;
		m)
		memorymb=$OPTARG
		;;
		c)
		cpus=$OPTARG
		;;
		s)
		staticip=$OPTARG
		;;
		p)
		addparam=$OPTARG
		;;
	esac
done

# Check if domain already exists
virsh dominfo nodename > /dev/null 2>&1
if [ "$?" -eq 0 ]; then
    echo -n "[WARNING] $nodename already exists.  "
    read -p "Do you want to overwrite $nodename [y/N]? " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
    else
        echo -e "\nNot overwriting $nodename. Exiting..."
        exit 1
    fi
fi

# Directory to store images
DIR={{ images_directory }}

# Location of cloud image
IMAGE={{ images_directory }}/{{ image_destination_name }}

# Amount of RAM in MB
MEM=${memorymb:-{{ system_default_ram_mb }}}

# Number of virtual CPUs
CPUS=${cpus:-{{ system_default_cpus }}}
{% if nested_virt_qemu_skip_vcpus %}#{% endif %}PARAM_VCPUS="--vcpus $CPUS"

# Enable huge pages?
{% if not hugepages_enabled %}#{% endif %}PARAM_HUGEPAGES="--memorybacking hugepages=yes"
{% if hugepages_enabled %}
if [ "$MEM" -lt "4096" ]; then
    echo "ERROR: Recommend you use 4096mb or more RAM when enabling hugepages"
    exit 1
fi
{% endif %}

# Cloud init files
USER_DATA=user-data
META_DATA=meta-data
CI_ISO=${nodename}-cidata.iso
DISK=${nodename}.qcow2

# Bridge for VMs (default on Fedora is {{ bridge_name }})
BRIDGE={{ bridge_name }}

# Additional network
{% if network_type == "ipv6" %}
net_ext='--network network=k8s_ipv6_private,model=virtio'
{% elif network_type == "2nics" %}
net_ext='--network network=multus_2nics,model=virtio'
{% else %}
net_ext=''
{% endif %}

# Start clean
rm -rf $DIR/${nodename}
mkdir -p $DIR/${nodename}

pushd $DIR/${nodename} > /dev/null

    # Create log file
    touch ${nodename}.log

    echo "$(date -R) Destroying the ${nodename} domain (if it exists)..."

    # Remove domain with the same name
    virsh destroy ${nodename} >> ${nodename}.log 2>&1
    virsh undefine ${nodename} >> ${nodename}.log 2>&1

    # cloud-init config: set hostname, remove cloud-init package,
    # and add ssh-key 
    cat > $USER_DATA << _EOF_
#cloud-config

# Hostname management
preserve_hostname: False
hostname: ${nodename}
fqdn: ${nodename}

# Remove cloud-init when finished with it
runcmd:
  - [ yum, -y, remove, cloud-init ]

# Configure where output will go
output: 
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_svcname: ssh
ssh_deletekeys: True
ssh_genkeytypes: ['rsa', 'ecdsa']

# Install my public ssh key to the first user-defined user configured 
# in cloud.cfg in the template (which is centos for CentOS cloud images)
ssh_authorized_keys:
  - {{ vm_ssh_key }}
_EOF_

    cat > $META_DATA << _EOF_
instance-id: ${nodename}
local-hostname: ${nodename}
_EOF_

{% if system_network is defined %}
if [ -n ${staticip} ]; then
    cat >> $META_DATA << _EOF_
network-interfaces: |
  auto eth0
  iface eth0 inet static
    address ${staticip}
    network {{ system_network }}
    netmask {{ system_netmask }}
    broadcast {{ system_broadcast }}
    gateway {{ system_gateway }}
    dns-nameservers {{ system_nameservers }}
    dns-search {{ system_dns_search }}
_EOF_
fi
{% endif %}

    echo "$(date -R) Copying template image..."
    cp $IMAGE $DISK

    # Create CD-ROM ISO with cloud-init config
    echo "$(date -R) Generating ISO for cloud-init..."
    genisoimage -output $CI_ISO -volid cidata -joliet -r $USER_DATA $META_DATA &>> ${nodename}.log

    echo "$(date -R) Installing the domain and adjusting the configuration..."
    echo "[INFO] Installing with the following parameters:"
    pwd >> /tmp/spinup.log
    echo "virt-install --import --name ${nodename} --ram $MEM $PARAM_VCPUS $PARAM_HUGEPAGES --disk \
    $DISK,format=qcow2,bus=virtio --disk $CI_ISO,device=cdrom --network \
    bridge={{ bridge_name }},model=virtio $net_ext --os-type=linux --os-variant=rhel6 --noautoconsole \
    --autostart {% if use_host_passthrough %}--cpu host-passthrough{% endif %} ${addparam}" >> /tmp/spinup.log

    virt-install --import --name ${nodename} --ram $MEM $PARAM_VCPUS $PARAM_HUGEPAGES --disk \
    $DISK,format=qcow2,bus=virtio --disk $CI_ISO,device=cdrom --network \
    bridge={{ bridge_name }},model=virtio $net_ext --os-type=linux --os-variant=rhel6 --noautoconsole \
    --autostart {% if use_host_passthrough %}--cpu host-passthrough{% endif %} ${addparam} >> /tmp/spinup.log 2>&1

    MAC=$(virsh domiflist ${nodename} | grep {{ bridge_name }} | awk '{print $5}')
    while true
    do
        # Skip this section when using a static IP.
        if [ -n "${staticip}" ]; then
            echo ${staticip} > /tmp/${nodename}.ip.txt
            break
        fi

        if [ -e "/var/lib/libvirt/dnsmasq/$BRIDGE.status" ]; then
            IP=$(grep -B1 $MAC /var/lib/libvirt/dnsmasq/$BRIDGE.status | head \
                 -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//)
        else
            # Use nmap to find it if it's using the bridged network 
            # (instead of local nat)
            mac=$(virsh domiflist ${nodename} | grep -i "virtio" | awk '{print $5}')
            IP=$(nmap -sP -n {{ bridge_network_cidr }} | grep -i "$mac" -B 2 | head -n1 | awk '{print $5}')
        fi

        if [ "$IP" = "" ]; then
            sleep 1
        else
            echo $IP > /tmp/${nodename}.ip.txt
            break
        fi
    done


    # Eject cdrom
    echo "$(date -R) Cleaning up cloud-init..."
    virsh change-media ${nodename} hda --eject --config >> ${nodename}.log

    # Remove the unnecessary cloud init files
    rm $USER_DATA $CI_ISO

    echo "$(date -R) DONE. SSH to ${nodename} using $IP, with  username 'centos'."

popd > /dev/null
