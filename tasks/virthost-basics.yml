---
- name: Install required packages
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - virt-manager
      - libvirt
      - libvirt-daemon-kvm
      - nano
      - tcpdump
      - net-tools
      - libvirt-client
      - virt-install
      - genisoimage
      - nmap

- name: pip install python modules
  pip:
    name: "{{ item }}"
  with_items:
    - lxml
    - libvirt-python

- name: Start and enable libvirtd
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: Make directory to store images...
  file:
    path: "{{ images_directory }}"
    state: directory

- name: Download CentOS (or Fedora) cloud image
  get_url:
    url: "{{ centos_genericcloud_url }}"
    dest: "{{ images_directory }}/{{ image_destination_name }}"
  register: download_image

- name: Default to not resizing cloud image
  set_fact:
    resize_image: false

- name: Flag for resizing
  set_fact:
    resize_image: true
  when: set_root_disk_gb is defined

- name: Increase root disk size (optionally)
  command: >
    qemu-img resize {{ images_directory }}/{{ image_destination_name }} {{ set_root_disk_gb }}G
  when: resize_image

- name: Generate an ssh key for root
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_vm_rsa

- name: Generate an ssh key for root
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_vm_rsa

- name: Setup facts and directory structure for root keys
  block:
    - name: Set vm_ssh_key_path optionally
      set_fact:
        vm_ssh_key_path: "{{ lookup('env', 'HOME') }}/.ssh/{{ inventory_hostname }}/id_vm_rsa"
      when: not vm_ssh_key_path is defined

    - name: Set proper mode on vm_ssh_key_path directory
      file:
        state: directory
        path: "{{ vm_ssh_key_path | dirname }}"
        mode: 0700

- name: Get root private key
  fetch:
    src: .ssh/id_vm_rsa
    dest: "{{ vm_ssh_key_path }}"
    flat: yes

- name: Get the public key
  command: >
    cat /root/.ssh/id_vm_rsa.pub
  register: cat_id_pub
  changed_when: false
  tags:
    - skip_ansible_lint
    # Skip ANSIBLE0012 because we always want to get this public key

- name: Set the public key as a fact
  set_fact:
    vm_ssh_key: "{{ cat_id_pub.stdout }}"

- name: Your SSH public key
  debug: "msg={{ vm_ssh_key }}"

- name: "Include bridge network playbook if necessary"
  import_tasks: bridge-network.yml
  when: bridge_networking

- name: Create ipv6 network
  block:
    - name: Define network namespace
      virt_net:
        name: k8s_ipv6_private
        command: define
        xml: >
          <network ipv6='yes'>
            <name>k8s_ipv6_private</name>
          </network>

    - name: Set network active
      virt_net:
        name: k8s_ipv6_private
        state: active

    - name: Set network to autostart
      virt_net:
        name: k8s_ipv6_private
        autostart: yes
  when: network_type == "ipv6"

- name: Create secondary network for multus_2nics
  block:
    - name: Define network namespace
      virt_net:
        name: multus_2nics
        command: define
        xml: >
          <network>
            <name>multus_2nics</name>
          </network>

    - name: Set network active
      virt_net:
        name: multus_2nics
        state: active

    - name: Set network to autostart
      virt_net:
        name: multus_2nics
        autostart: yes
  when: network_type == "2nics"

- name: enable ipv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: 1
    sysctl_set: yes
    state: present
